{"version":3,"sources":["../node_modules/caver-js/packages sync /^/.*/src/index/.js$","assets/ggnz.gif","components/Footer.js","components/Minter.js","index.js"],"names":["map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","Footer","mintInfo","info","connectToContract","className","style","backgroundColor","connected","onClick","contract","account","String","substring","initialInfoState","status","caver","address","contractJSON","keyring","initialMintState","loading","name","amount","supply","cost","Minter","useState","setInfo","setMintInfo","disabled","setDisabled","isOwner","setIsOwner","init","_request","_contractJSON","a","window","klaytn","isKaikas","enable","accounts","networkVersion","chain_id","Caver","klay","Contract","abi","prevState","handleOwnerChanged","getSupply","call","result","utils","hexToNumberString","getCost","convertFromPeb","total_supply","mint","encodeFunctionCall","type","inputs","encodedCall","sendTransaction","from","to","input","gas","value","toPeb","Number","handleWithdraw","methods","withdraw","send","prev","state","owner","toLowerCase","useEffect","on","location","reload","alt","src","ggnz","onSubmit","preventDefault","placeholder","onChange","newAmount","val","target","undefined","chain_symbol","position","bottom","left","href","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7978c3fe.chunk.js","sourcesContent":["var map = {\n\t\"./caver-abi/src/index.js\": 78,\n\t\"./caver-account/src/index.js\": 41,\n\t\"./caver-contract/src/index.js\": 55,\n\t\"./caver-core-helpers/src/index.js\": 19,\n\t\"./caver-core-method/src/index.js\": 38,\n\t\"./caver-core-requestmanager/caver-providers-http/src/index.js\": 206,\n\t\"./caver-core-requestmanager/caver-providers-ipc/src/index.js\": 216,\n\t\"./caver-core-requestmanager/caver-providers-ws/src/index.js\": 204,\n\t\"./caver-core-requestmanager/src/index.js\": 201,\n\t\"./caver-core-subscriptions/src/index.js\": 74,\n\t\"./caver-core/src/index.js\": 28,\n\t\"./caver-ipfs/src/index.js\": 235,\n\t\"./caver-kct/src/index.js\": 247,\n\t\"./caver-klay/caver-klay-accounts/src/index.js\": 250,\n\t\"./caver-klay/caver-klay-personal/src/index.js\": 253,\n\t\"./caver-klay/src/index.js\": 254,\n\t\"./caver-middleware/src/index.js\": 124,\n\t\"./caver-net/src/index.js\": 142,\n\t\"./caver-rpc/src/index.js\": 255,\n\t\"./caver-rtm/src/index.js\": 76,\n\t\"./caver-transaction/src/index.js\": 256,\n\t\"./caver-utils/iban/src/index.js\": 197,\n\t\"./caver-utils/promievent/src/index.js\": 196,\n\t\"./caver-utils/src/index.js\": 0,\n\t\"./caver-validator/src/index.js\": 143,\n\t\"./caver-wallet/src/index.js\": 136\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 270;","export default __webpack_public_path__ + \"static/media/ggnz.14415925.gif\";","import contract from \"../contracts/contract.json\";\nfunction Footer({ mintInfo, info, connectToContract }) {\n    return (\n        <div className=\"card_footer\">\n            <button\n                className=\"button\"\n                style={{\n                    backgroundColor: info.connected\n                        ? \"var(--success)\"\n                        : \"var(--warning)\",\n                }}\n                onClick={() => connectToContract(contract)}\n            >\n                {info.account ? \"Connected\" : \"Connect Wallet\"}\n            </button>\n            {info.connected ? (\n                <span className=\"accountText\">\n                    {String(info.account).substring(0, 6) +\n                        \"...\" +\n                        String(info.account).substring(38)}\n                    {/* {String(info.account)} */}\n                </span>\n            ) : null}\n        </div>\n    );\n}\nexport default Footer;\n","import { useEffect, useState } from \"react\";\nimport Caver from \"caver-js\";\nimport contract from \"../contracts/contract.json\";\nimport ggnz from \"../assets/ggnz.gif\";\nimport Footer from \"./Footer\";\nconst initialInfoState = {\n    connected: false,\n    status: null,\n    account: null,\n    caver: null,\n    contract: null,\n    address: null,\n    contractJSON: null,\n    keyring: null,\n};\n\nconst initialMintState = {\n    loading: false,\n    status: `Mint your ${contract.name}`,\n    amount: null,\n    supply: \"0\",\n    cost: \"0\",\n};\n\nconst MAGICWORD = \"Jini\";\n\nconst MAX_MINT_AMOUNT = 40;\nconst MIN_MINT_AMOUNT = 1;\n\nfunction Minter() {\n    const [info, setInfo] = useState(initialInfoState);\n    const [mintInfo, setMintInfo] = useState(initialMintState);\n    const [disabled, setDisabled] = useState(true);\n    const [isOwner, setIsOwner] = useState(false);\n\n    const init = async (_request, _contractJSON) => {\n        if (window.klaytn.isKaikas) {\n            try {\n                const accounts = await window.klaytn.enable();\n                const networkId = await window.klaytn.networkVersion;\n\n                if (networkId == _contractJSON.chain_id) {\n                    let caver = new Caver(window.klaytn);\n                    let contract = new caver.klay.Contract(\n                        _contractJSON.abi,\n                        _contractJSON.address\n                    );\n\n                    setInfo((prevState) => ({\n                        ...prevState,\n                        connected: true,\n                        status: null,\n                        account: accounts[0],\n                        caver: caver,\n                        contract: contract,\n                        contractJSON: _contractJSON,\n                    }));\n\n                    handleOwnerChanged(contract, accounts[0]);\n                }\n            } catch (err) {\n                setInfo(() => ({\n                    ...initialInfoState,\n                }));\n            }\n        } else {\n            setInfo(() => ({\n                ...initialInfoState,\n                status: \"Please install Kaikas.\",\n            }));\n        }\n    };\n\n    const initListeners = () => {\n        if (window.klaytn) {\n            window.klaytn.on(\"accountsChanged\", () => {\n                window.location.reload();\n            });\n            window.klaytn.on(\"networkChanged\", () => {\n                window.location.reload();\n            });\n        }\n    };\n\n    const getSupply = async () => {\n        try {\n            const result = await info.contract.call(\"totalSupply\");\n            setMintInfo((prevState) => ({\n                ...prevState,\n                supply: info.caver.utils.hexToNumberString(result),\n            }));\n        } catch (err) {\n            setMintInfo((prevState) => ({\n                ...prevState,\n                supply: 0,\n            }));\n        }\n    };\n\n    const getCost = async () => {\n        try {\n            const result = await info.contract.call(\"getPrice\");\n\n            setMintInfo((prevState) => ({\n                ...prevState,\n                cost: info.caver.utils.hexToNumberString(\n                    info.caver.utils.convertFromPeb(result, \"KLAY\")\n                ),\n            }));\n        } catch (err) {\n            setMintInfo((prevState) => ({\n                ...prevState,\n                cost: contract.total_supply,\n            }));\n        }\n    };\n\n    const mint = async () => {\n        try {\n            setMintInfo((prevState) => ({\n                ...prevState,\n                loading: true,\n                status: `Minting ${mintInfo.amount}...`,\n            }));\n            let encodedCall = await info.caver.abi.encodeFunctionCall(\n                {\n                    name: \"mintBatch\",\n                    type: \"function\",\n                    inputs: [\n                        {\n                            name: \"to\",\n                            type: \"address\",\n                        },\n                        {\n                            name: \"_mintAmount\",\n                            type: \"uint256\",\n                        },\n                        { name: \"_magicword\", type: \"string\" },\n                    ],\n                },\n                [info.account, mintInfo.amount, MAGICWORD]\n            );\n            await info.caver.klay.sendTransaction({\n                type: \"SMART_CONTRACT_EXECUTION\",\n                from: info.account,\n                to: info.contractJSON.address,\n                input: encodedCall,\n                gas: \"2500000\",\n                value: String(\n                    info.caver.utils.toPeb(\n                        Number(mintInfo.cost) * mintInfo.amount\n                    )\n                ),\n            });\n\n            setMintInfo((prevState) => ({\n                ...prevState,\n                loading: false,\n                status: \"Minting Complete!\",\n            }));\n            getSupply();\n        } catch (err) {\n            setMintInfo((prevState) => ({\n                ...prevState,\n                loading: false,\n                status: \"NFT minting Failed T.T\",\n            }));\n        }\n    };\n\n    const updateAmount = (newAmount) => {\n        if (newAmount <= 40 && newAmount >= 1) {\n            setMintInfo((prevState) => ({\n                ...prevState,\n                amount: newAmount,\n            }));\n        } else {\n            setMintInfo((prev) => ({\n                ...prev,\n                amount: undefined,\n            }));\n        }\n    };\n\n    const handleWithdraw = async () => {\n        try {\n            setMintInfo((prevState) => ({\n                ...prevState,\n                loading: true,\n                status: `Withdrawing...`,\n            }));\n\n            await info.contract.methods\n                .withdraw()\n                .send({ from: info.account, gas: \"2500000\" });\n            setMintInfo((prevState) => ({\n                ...prevState,\n                status: \"Withdrawing completed\",\n            }));\n            setInfo((prev) => ({\n                ...prev,\n                state: \"Withdraw Complete!\",\n            }));\n        } catch (err) {\n            setMintInfo((prev) => ({\n                ...prev,\n                status: \"Withdraw Failed T.T\",\n            }));\n        }\n    };\n\n    const connectToContract = (_contractJSON) => {\n        init(\"klay_getAccount\", _contractJSON);\n    };\n\n    const handleButton = (val) => {\n        if (val <= MAX_MINT_AMOUNT && val >= MIN_MINT_AMOUNT) {\n            setDisabled(false);\n        } else {\n            setDisabled(true);\n        }\n    };\n\n    const handleOwnerChanged = async (contract, account) => {\n        try {\n            const result = await contract.methods\n                .owner()\n                .call({ from: account });\n\n            if (account === result.toLowerCase()) {\n                setIsOwner(true);\n            } else {\n                setIsOwner(false);\n            }\n        } catch (err) {\n            setIsOwner(false);\n        }\n    };\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        setMintInfo((prev) => ({\n            ...prev,\n            amount: \"\",\n        }));\n    };\n\n    useEffect(() => {\n        connectToContract(contract);\n        initListeners();\n    }, []);\n\n    useEffect(() => {\n        if (info.connected) {\n            getSupply();\n            getCost();\n        }\n    }, [info.connected]);\n\n    return (\n        <div className=\"page\">\n            <div className=\"card\">\n                {/* 헤더 */}\n                <div className=\"card_header\">\n                    <img\n                        className=\"card_header_image ns\"\n                        alt={\"banner\"}\n                        src={ggnz}\n                    />\n                </div>\n\n                <div className=\"contents\">\n                    {mintInfo.supply < contract.total_supply ? (\n                        <div className=\"card_body\">\n                            <div className=\"title__and__remaining\">\n                                <div className=\"title\">{contract.name} </div>\n\n                                {info.connected ? (\n                                    <div className=\"remaining__and__price\">\n                                        <div className=\"remaining\">\n                                            {/* 남은 NFT */}\n                                            Remaing:{\" \"}\n                                            {contract.total_supply -\n                                                mintInfo.supply}\n                                        </div>\n                                    </div>\n                                ) : null}\n                            </div>\n                            {/* 민팅 버튼*/}\n                            <div className=\"minting\">\n                                <div className=\"minting_box\">\n                                    <form onSubmit={handleSubmit}>\n                                        <input\n                                            className=\"minting_amount\"\n                                            type=\"text\"\n                                            placeholder=\"mint amount\"\n                                            value={mintInfo.amount}\n                                            onChange={(e) => {\n                                                updateAmount(e.target.value);\n                                                handleButton(e.target.value);\n                                            }}\n                                        ></input>\n\n                                        {info.connected ? (\n                                            <div className=\"minting_total\">\n                                                {/* 가격 */}(\n                                                {mintInfo.amount === undefined\n                                                    ? 0\n                                                    : mintInfo.cost *\n                                                      mintInfo.amount}{\" \"}\n                                                {contract.chain_symbol})\n                                            </div>\n                                        ) : null}\n                                        <input\n                                            type=\"submit\"\n                                            className=\"minting_button\"\n                                            onClick={() => mint()}\n                                            disabled={disabled}\n                                            value=\"Mint\"\n                                        ></input>\n                                    </form>\n                                </div>\n\n                                {mintInfo.status ? (\n                                    <p className=\"statusText\">\n                                        {mintInfo.status}\n                                    </p>\n                                ) : null}\n                                {info.status ? (\n                                    <p className=\"statusText\">{info.status}</p>\n                                ) : null}\n                            </div>\n                            {isOwner ? (\n                                <button\n                                    className=\"withdraw\"\n                                    onClick={handleWithdraw}\n                                >\n                                    Withdraw\n                                </button>\n                            ) : (\n                                \"\"\n                            )}\n                        </div>\n                    ) : (\n                        <div className=\"card_body\">\n                            {/* 다 팔린 경우 */}\n\n                            <div className=\"statusText\">\n                                We've sold out! .You can still buy and trade the{\" \"}\n                                {contract.name} on marketplaces such as Opensea.\n                            </div>\n                            {isOwner ? (\n                                <button\n                                    className=\"withdraw\"\n                                    onClick={handleWithdraw}\n                                >\n                                    Withdraw\n                                </button>\n                            ) : (\n                                \"\"\n                            )}\n                        </div>\n                    )}\n\n                    <Footer\n                        mintInfo={mintInfo}\n                        info={info}\n                        connectToContract={connectToContract}\n                    />\n                </div>\n                <a\n                    style={{\n                        position: \"absolute\",\n                        bottom: 55,\n                        left: -75,\n                    }}\n                    className=\"_90 contract_url\"\n                    target=\"_blank\"\n                    href={\n                        contract.chain_id === 8217\n                            ? `https://scope.klaytn.com/account/${contract.address}`\n                            : `https://baobab.scope.klaytn.com/account/${contract.address}`\n                    }\n                >\n                    View Contract\n                </a>\n            </div>\n        </div>\n    );\n}\n\nexport default Minter;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Minter from \"./components/Minter\";\nimport \"./styles/styles.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Minter />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}